//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/aaspr.DESKTOP-G6R73JT/OneDrive/Desktop/flytning/p4-compiler/alang_compile/core_compile\ALang.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrGen {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ALangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ENDIF=1, ENDREPEAT=2, ENDTERM=3, IF=4, REPEAT=5, TIMES=6, THEN=7, TYPE=8, 
		EQUAL=9, OPERATOR=10, INTEGERS=11, PIN=12, TOGGLE=13, ID=14, WHITESPACE=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ENDIF", "ENDREPEAT", "ENDTERM", "IF", "REPEAT", "TIMES", "THEN", "TYPE", 
		"EQUAL", "OPERATOR", "INTEGERS", "DIGITS", "PIN", "TOGGLE", "ID", "UPPERCASE", 
		"LOWERCASE", "WHITESPACE"
	};


	public ALangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ALangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'endif'", "'endrepeat'", "';'", "'if'", "'repeat'", "'times'", 
		"'then'", null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ENDIF", "ENDREPEAT", "ENDTERM", "IF", "REPEAT", "TIMES", "THEN", 
		"TYPE", "EQUAL", "OPERATOR", "INTEGERS", "PIN", "TOGGLE", "ID", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ALang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ALangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x11', '\x87', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'U', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', ']', '\n', '\f', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\x61', '\n', '\r', '\f', '\r', '\xE', '\r', '\x64', '\v', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'i', '\n', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', 'p', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x6', 
		'\x10', 't', '\n', '\x10', '\r', '\x10', '\xE', '\x10', 'u', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '~', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x6', 
		'\x13', '\x82', '\n', '\x13', '\r', '\x13', '\xE', '\x13', '\x83', '\x3', 
		'\x13', '\x3', '\x13', '\x2', '\x2', '\x14', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', 
		'\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\x2', '\x1B', 
		'\xE', '\x1D', '\xF', '\x1F', '\x10', '!', '\x2', '#', '\x2', '%', '\x11', 
		'\x3', '\x2', '\x6', '\x5', '\x2', ',', '-', '/', '/', '\x31', '\x31', 
		'\x3', '\x2', '\x43', '\\', '\x3', '\x2', '\x63', '|', '\x4', '\x2', '\v', 
		'\v', '\"', '\"', '\x2', '\x8E', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\'', '\x3', '\x2', '\x2', '\x2', '\x5', '-', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x37', '\x3', '\x2', '\x2', '\x2', '\t', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\v', '<', '\x3', '\x2', '\x2', '\x2', '\r', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\xF', 'I', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'T', '\x3', '\x2', '\x2', '\x2', '\x13', 'V', '\x3', '\x2', '\x2', '\x2', 
		'\x15', 'X', '\x3', '\x2', '\x2', '\x2', '\x17', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '^', '\x3', '\x2', '\x2', '\x2', '\x1B', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', 'o', '\x3', '\x2', '\x2', '\x2', '\x1F', 's', '\x3', 
		'\x2', '\x2', '\x2', '!', 'w', '\x3', '\x2', '\x2', '\x2', '#', 'y', '\x3', 
		'\x2', '\x2', '\x2', '%', '\x81', '\x3', '\x2', '\x2', '\x2', '\'', '(', 
		'\a', 'g', '\x2', '\x2', '(', ')', '\a', 'p', '\x2', '\x2', ')', '*', 
		'\a', '\x66', '\x2', '\x2', '*', '+', '\a', 'k', '\x2', '\x2', '+', ',', 
		'\a', 'h', '\x2', '\x2', ',', '\x4', '\x3', '\x2', '\x2', '\x2', '-', 
		'.', '\a', 'g', '\x2', '\x2', '.', '/', '\a', 'p', '\x2', '\x2', '/', 
		'\x30', '\a', '\x66', '\x2', '\x2', '\x30', '\x31', '\a', 't', '\x2', 
		'\x2', '\x31', '\x32', '\a', 'g', '\x2', '\x2', '\x32', '\x33', '\a', 
		'r', '\x2', '\x2', '\x33', '\x34', '\a', 'g', '\x2', '\x2', '\x34', '\x35', 
		'\a', '\x63', '\x2', '\x2', '\x35', '\x36', '\a', 'v', '\x2', '\x2', '\x36', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '=', '\x2', '\x2', 
		'\x38', '\b', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', 'k', '\x2', 
		'\x2', ':', ';', '\a', 'h', '\x2', '\x2', ';', '\n', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\a', 't', '\x2', '\x2', '=', '>', '\a', 'g', '\x2', 
		'\x2', '>', '?', '\a', 'r', '\x2', '\x2', '?', '@', '\a', 'g', '\x2', 
		'\x2', '@', '\x41', '\a', '\x63', '\x2', '\x2', '\x41', '\x42', '\a', 
		'v', '\x2', '\x2', '\x42', '\f', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\a', 'v', '\x2', '\x2', '\x44', '\x45', '\a', 'k', '\x2', '\x2', '\x45', 
		'\x46', '\a', 'o', '\x2', '\x2', '\x46', 'G', '\a', 'g', '\x2', '\x2', 
		'G', 'H', '\a', 'u', '\x2', '\x2', 'H', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\a', 'v', '\x2', '\x2', 'J', 'K', '\a', 'j', '\x2', '\x2', 
		'K', 'L', '\a', 'g', '\x2', '\x2', 'L', 'M', '\a', 'p', '\x2', '\x2', 
		'M', '\x10', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', 'k', '\x2', '\x2', 
		'O', 'P', '\a', 'p', '\x2', '\x2', 'P', 'U', '\a', 'v', '\x2', '\x2', 
		'Q', 'R', '\a', 'r', '\x2', '\x2', 'R', 'S', '\a', 'k', '\x2', '\x2', 
		'S', 'U', '\a', 'p', '\x2', '\x2', 'T', 'N', '\x3', '\x2', '\x2', '\x2', 
		'T', 'Q', '\x3', '\x2', '\x2', '\x2', 'U', '\x12', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\a', '?', '\x2', '\x2', 'W', '\x14', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\t', '\x2', '\x2', '\x2', 'Y', '\x16', '\x3', '\x2', 
		'\x2', '\x2', 'Z', ']', '\a', '\x32', '\x2', '\x2', '[', ']', '\x5', '\x19', 
		'\r', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '[', '\x3', 
		'\x2', '\x2', '\x2', ']', '\x18', '\x3', '\x2', '\x2', '\x2', '^', '\x62', 
		'\x4', '\x33', ';', '\x2', '_', '\x61', '\x4', '\x32', ';', '\x2', '`', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x65', 'i', '\x4', '\x32', ';', '\x2', 
		'\x66', 'g', '\a', '\x33', '\x2', '\x2', 'g', 'i', '\x4', '\x32', '\x35', 
		'\x2', 'h', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'i', '\x1C', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', 
		'q', '\x2', '\x2', 'k', 'p', '\a', 'p', '\x2', '\x2', 'l', 'm', '\a', 
		'q', '\x2', '\x2', 'm', 'n', '\a', 'h', '\x2', '\x2', 'n', 'p', '\a', 
		'h', '\x2', '\x2', 'o', 'j', '\x3', '\x2', '\x2', '\x2', 'o', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'p', '\x1E', '\x3', '\x2', '\x2', '\x2', 'q', 't', 
		'\x5', '#', '\x12', '\x2', 'r', 't', '\x5', '!', '\x11', '\x2', 's', 'q', 
		'\x3', '\x2', '\x2', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 't', 
		'u', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', ' ', '\x3', '\x2', '\x2', '\x2', 
		'w', 'x', '\t', '\x3', '\x2', '\x2', 'x', '\"', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\t', '\x4', '\x2', '\x2', 'z', '$', '\x3', '\x2', '\x2', '\x2', 
		'{', '\x82', '\t', '\x5', '\x2', '\x2', '|', '~', '\a', '\xF', '\x2', 
		'\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\a', 
		'\f', '\x2', '\x2', '\x80', '\x82', '\a', '\xF', '\x2', '\x2', '\x81', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x81', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x86', '\b', '\x13', '\x2', '\x2', '\x86', '&', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\x2', 'T', '\\', '\x62', 'h', 'o', 's', 'u', '}', 
		'\x81', '\x83', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrGen
