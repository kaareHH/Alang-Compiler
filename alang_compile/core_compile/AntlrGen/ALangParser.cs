//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/aaspr.DESKTOP-G6R73JT/OneDrive/Desktop/flytning/p4-compiler/alang_compile/core_compile\ALang.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrGen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ALangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ENDIF=1, ENDREPEAT=2, ENDTERM=3, IF=4, REPEAT=5, TIMES=6, THEN=7, TYPE=8, 
		EQUAL=9, OPERATOR=10, INTEGERS=11, PIN=12, TOGGLE=13, ID=14, WHITESPACE=15;
	public const int
		RULE_start = 0, RULE_stmts = 1, RULE_stmt = 2, RULE_dcls = 3, RULE_dcl = 4, 
		RULE_assignstmt = 5, RULE_ifstmt = 6, RULE_repeatstmt = 7, RULE_outputstmt = 8, 
		RULE_expr = 9, RULE_value = 10;
	public static readonly string[] ruleNames = {
		"start", "stmts", "stmt", "dcls", "dcl", "assignstmt", "ifstmt", "repeatstmt", 
		"outputstmt", "expr", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'endif'", "'endrepeat'", "';'", "'if'", "'repeat'", "'times'", 
		"'then'", null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ENDIF", "ENDREPEAT", "ENDTERM", "IF", "REPEAT", "TIMES", "THEN", 
		"TYPE", "EQUAL", "OPERATOR", "INTEGERS", "PIN", "TOGGLE", "ID", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ALang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ALangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ALangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ALangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public DclsContext dcls() {
			return GetRuleContext<DclsContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ALangParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; dcls();
			State = 23; stmts();
			State = 24; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << REPEAT) | (1L << TOGGLE) | (1L << ID))) != 0)) {
				{
				{
				State = 26; stmt();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public AssignstmtContext assignstmt() {
			return GetRuleContext<AssignstmtContext>(0);
		}
		public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		public RepeatstmtContext repeatstmt() {
			return GetRuleContext<RepeatstmtContext>(0);
		}
		public OutputstmtContext outputstmt() {
			return GetRuleContext<OutputstmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32; assignstmt();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; ifstmt();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 34; repeatstmt();
				}
				break;
			case TOGGLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 35; outputstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclsContext : ParserRuleContext {
		public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public DclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcls; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterDcls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitDcls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclsContext dcls() {
		DclsContext _localctx = new DclsContext(Context, State);
		EnterRule(_localctx, 6, RULE_dcls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TYPE) {
				{
				{
				State = 38; dcl();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(ALangParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(ALangParser.ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(ALangParser.EQUAL, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode ENDTERM() { return GetToken(ALangParser.ENDTERM, 0); }
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterDcl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitDcl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 8, RULE_dcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(TYPE);
			State = 45; Match(ID);
			State = 46; Match(EQUAL);
			State = 47; value();
			State = 48; Match(ENDTERM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignstmtContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ALangParser.ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(ALangParser.EQUAL, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDTERM() { return GetToken(ALangParser.ENDTERM, 0); }
		public AssignstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterAssignstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitAssignstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignstmtContext assignstmt() {
		AssignstmtContext _localctx = new AssignstmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(ID);
			State = 51; Match(EQUAL);
			State = 52; value();
			State = 53; expr();
			State = 54; Match(ENDTERM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(ALangParser.IF, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(ALangParser.THEN, 0); }
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ITerminalNode ENDIF() { return GetToken(ALangParser.ENDIF, 0); }
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(IF);
			State = 57; value();
			State = 58; expr();
			State = 59; Match(THEN);
			State = 60; stmts();
			State = 61; Match(ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatstmtContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(ALangParser.REPEAT, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode TIMES() { return GetToken(ALangParser.TIMES, 0); }
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ITerminalNode ENDREPEAT() { return GetToken(ALangParser.ENDREPEAT, 0); }
		public RepeatstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterRepeatstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitRepeatstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatstmtContext repeatstmt() {
		RepeatstmtContext _localctx = new RepeatstmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_repeatstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(REPEAT);
			State = 64; value();
			State = 65; Match(TIMES);
			State = 66; stmts();
			State = 67; Match(ENDREPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputstmtContext : ParserRuleContext {
		public ITerminalNode TOGGLE() { return GetToken(ALangParser.TOGGLE, 0); }
		public ITerminalNode ID() { return GetToken(ALangParser.ID, 0); }
		public OutputstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterOutputstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitOutputstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputstmtContext outputstmt() {
		OutputstmtContext _localctx = new OutputstmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_outputstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(TOGGLE);
			State = 70; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ITerminalNode[] OPERATOR() { return GetTokens(ALangParser.OPERATOR); }
		public ITerminalNode OPERATOR(int i) {
			return GetToken(ALangParser.OPERATOR, i);
		}
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPERATOR) {
				{
				{
				State = 72; Match(OPERATOR);
				State = 73; value();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ALangParser.ID, 0); }
		public ITerminalNode INTEGERS() { return GetToken(ALangParser.INTEGERS, 0); }
		public ITerminalNode PIN() { return GetToken(ALangParser.PIN, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGERS) | (1L << PIN) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', 'T', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\a', '\x3', '\x1E', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '!', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\'', '\n', '\x4', '\x3', '\x5', '\a', '\x5', '*', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '-', '\v', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', 'M', '\n', '\v', '\f', '\v', '\xE', 
		'\v', 'P', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x2', '\x2', 
		'\r', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x2', '\x3', '\x4', '\x2', '\r', '\xE', '\x10', '\x10', '\x2', 
		'N', '\x2', '\x18', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '&', '\x3', '\x2', '\x2', '\x2', '\b', '+', 
		'\x3', '\x2', '\x2', '\x2', '\n', '.', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\xE', ':', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x41', '\x3', '\x2', '\x2', '\x2', '\x12', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x14', 'N', '\x3', '\x2', '\x2', '\x2', '\x16', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x19', '\x5', '\b', '\x5', '\x2', '\x19', 
		'\x1A', '\x5', '\x4', '\x3', '\x2', '\x1A', '\x1B', '\a', '\x2', '\x2', 
		'\x3', '\x1B', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\x5', 
		'\x6', '\x4', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '\'', '\x5', 
		'\f', '\a', '\x2', '#', '\'', '\x5', '\xE', '\b', '\x2', '$', '\'', '\x5', 
		'\x10', '\t', '\x2', '%', '\'', '\x5', '\x12', '\n', '\x2', '&', '\"', 
		'\x3', '\x2', '\x2', '\x2', '&', '#', '\x3', '\x2', '\x2', '\x2', '&', 
		'$', '\x3', '\x2', '\x2', '\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', 
		'\'', '\a', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x5', '\n', '\x6', 
		'\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', 
		'\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', 
		'\x2', ',', '\t', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\a', '\n', '\x2', '\x2', '/', '\x30', '\a', '\x10', 
		'\x2', '\x2', '\x30', '\x31', '\a', '\v', '\x2', '\x2', '\x31', '\x32', 
		'\x5', '\x16', '\f', '\x2', '\x32', '\x33', '\a', '\x5', '\x2', '\x2', 
		'\x33', '\v', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', '\x10', 
		'\x2', '\x2', '\x35', '\x36', '\a', '\v', '\x2', '\x2', '\x36', '\x37', 
		'\x5', '\x16', '\f', '\x2', '\x37', '\x38', '\x5', '\x14', '\v', '\x2', 
		'\x38', '\x39', '\a', '\x5', '\x2', '\x2', '\x39', '\r', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\a', '\x6', '\x2', '\x2', ';', '<', '\x5', '\x16', 
		'\f', '\x2', '<', '=', '\x5', '\x14', '\v', '\x2', '=', '>', '\a', '\t', 
		'\x2', '\x2', '>', '?', '\x5', '\x4', '\x3', '\x2', '?', '@', '\a', '\x3', 
		'\x2', '\x2', '@', '\xF', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\a', '\a', '\x2', '\x2', '\x42', '\x43', '\x5', '\x16', '\f', '\x2', 
		'\x43', '\x44', '\a', '\b', '\x2', '\x2', '\x44', '\x45', '\x5', '\x4', 
		'\x3', '\x2', '\x45', '\x46', '\a', '\x4', '\x2', '\x2', '\x46', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\xF', '\x2', '\x2', 'H', 
		'I', '\a', '\x10', '\x2', '\x2', 'I', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\a', '\f', '\x2', '\x2', 'K', 'M', '\x5', '\x16', '\f', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', '\x15', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\t', '\x2', '\x2', '\x2', 'R', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x1F', '&', '+', 'N',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrGen
