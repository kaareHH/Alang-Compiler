//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/mads/dev/aau/p4-compiler/alang_compile/core_compile/ALang.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrGen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ALangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ENDIF=10, ENDREPEAT=11, ENDTERM=12, IF=13, ELSEIF=14, ELSE=15, REPEAT=16, 
		TIMES=17, THEN=18, TYPE=19, LPAREN=20, RPAREN=21, COMMA=22, ASSIGNOPERATOR=23, 
		ADDOP=24, MULOP=25, BOOLOP=26, PREDOP=27, BOOLEAN=28, INTEGERS=29, PIN=30, 
		ON=31, OFF=32, TIME=33, FLOAT=34, ID=35, ALANGFILENAME=36, WHITESPACE=37, 
		NEWLINE=38, BLOCKCOMMENT=39, LINECOMMENT=40;
	public const int
		RULE_start = 0, RULE_commands = 1, RULE_dcl = 2, RULE_function = 3, RULE_imports = 4, 
		RULE_primaryExpression = 5, RULE_predicateExpression = 6, RULE_additiveExpression = 7, 
		RULE_multiExpression = 8, RULE_primary = 9, RULE_params = 10, RULE_param = 11, 
		RULE_stmts = 12, RULE_assignstmt = 13, RULE_ifstmt = 14, RULE_repeatstmt = 15, 
		RULE_outputstmt = 16, RULE_returnstmt = 17, RULE_functioncall = 18, RULE_inputparams = 19, 
		RULE_value = 20;
	public static readonly string[] ruleNames = {
		"start", "commands", "dcl", "function", "imports", "primaryExpression", 
		"predicateExpression", "additiveExpression", "multiExpression", "primary", 
		"params", "param", "stmts", "assignstmt", "ifstmt", "repeatstmt", "outputstmt", 
		"returnstmt", "functioncall", "inputparams", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'function'", "'->'", "'|'", "'endfunction'", "'import'", "'while'", 
		"'do'", "'endwhile'", "'return'", "'endif'", "'endrepeat'", "';'", "'if'", 
		"'else if'", "'else'", "'repeat'", "'times'", "'then'", null, "'('", "')'", 
		"','", "'='", null, null, null, null, null, null, null, "'ON'", "'OFF'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "ENDIF", "ENDREPEAT", 
		"ENDTERM", "IF", "ELSEIF", "ELSE", "REPEAT", "TIMES", "THEN", "TYPE", 
		"LPAREN", "RPAREN", "COMMA", "ASSIGNOPERATOR", "ADDOP", "MULOP", "BOOLOP", 
		"PREDOP", "BOOLEAN", "INTEGERS", "PIN", "ON", "OFF", "TIME", "FLOAT", 
		"ID", "ALANGFILENAME", "WHITESPACE", "NEWLINE", "BLOCKCOMMENT", "LINECOMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ALang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ALangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ALangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ALangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ALangParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; commands();
			State = 43; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandsContext : ParserRuleContext {
		public DclContext dcl() {
			return GetRuleContext<DclContext>(0);
		}
		public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ImportsContext imports() {
			return GetRuleContext<ImportsContext>(0);
		}
		public CommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandsContext commands() {
		CommandsContext _localctx = new CommandsContext(Context, State);
		EnterRule(_localctx, 2, RULE_commands);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; dcl();
				State = 46; commands();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; function();
				State = 49; commands();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 51; imports();
				State = 52; commands();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(ALangParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(ALangParser.ID, 0); }
		public ITerminalNode ASSIGNOPERATOR() { return GetToken(ALangParser.ASSIGNOPERATOR, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode ENDTERM() { return GetToken(ALangParser.ENDTERM, 0); }
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterDcl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitDcl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 4, RULE_dcl);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; Match(TYPE);
				State = 58; Match(ID);
				State = 59; Match(ASSIGNOPERATOR);
				State = 60; primaryExpression();
				State = 61; Match(ENDTERM);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; Match(TYPE);
				State = 64; Match(ID);
				State = 65; Match(ENDTERM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ALangParser.ID, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(ALangParser.TYPE, 0); }
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(T__0);
			State = 69; Match(ID);
			State = 70; Match(T__1);
			State = 71; @params();
			State = 72; Match(T__2);
			State = 73; Match(TYPE);
			State = 74; stmts();
			State = 75; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportsContext : ParserRuleContext {
		public ITerminalNode ALANGFILENAME() { return GetToken(ALangParser.ALANGFILENAME, 0); }
		public ITerminalNode ENDTERM() { return GetToken(ALangParser.ENDTERM, 0); }
		public ImportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterImports(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitImports(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImports(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportsContext imports() {
		ImportsContext _localctx = new ImportsContext(Context, State);
		EnterRule(_localctx, 8, RULE_imports);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(T__4);
			State = 78; Match(ALANGFILENAME);
			State = 79; Match(ENDTERM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PredicateExpressionContext[] predicateExpression() {
			return GetRuleContexts<PredicateExpressionContext>();
		}
		public PredicateExpressionContext predicateExpression(int i) {
			return GetRuleContext<PredicateExpressionContext>(i);
		}
		public ITerminalNode[] BOOLOP() { return GetTokens(ALangParser.BOOLOP); }
		public ITerminalNode BOOLOP(int i) {
			return GetToken(ALangParser.BOOLOP, i);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_primaryExpression);
		int _la;
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case INTEGERS:
			case PIN:
			case TIME:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81; predicateExpression();
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BOOLOP) {
					{
					{
					State = 82; Match(BOOLOP);
					State = 83; predicateExpression();
					}
					}
					State = 88;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__6:
			case ENDTERM:
			case THEN:
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public ITerminalNode[] PREDOP() { return GetTokens(ALangParser.PREDOP); }
		public ITerminalNode PREDOP(int i) {
			return GetToken(ALangParser.PREDOP, i);
		}
		public PredicateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterPredicateExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitPredicateExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateExpressionContext predicateExpression() {
		PredicateExpressionContext _localctx = new PredicateExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_predicateExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; additiveExpression();
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PREDOP) {
				{
				{
				State = 93; Match(PREDOP);
				State = 94; additiveExpression();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiExpressionContext[] multiExpression() {
			return GetRuleContexts<MultiExpressionContext>();
		}
		public MultiExpressionContext multiExpression(int i) {
			return GetRuleContext<MultiExpressionContext>(i);
		}
		public ITerminalNode[] ADDOP() { return GetTokens(ALangParser.ADDOP); }
		public ITerminalNode ADDOP(int i) {
			return GetToken(ALangParser.ADDOP, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; multiExpression();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADDOP) {
				{
				{
				State = 101; Match(ADDOP);
				State = 102; multiExpression();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiExpressionContext : ParserRuleContext {
		public PrimaryContext[] primary() {
			return GetRuleContexts<PrimaryContext>();
		}
		public PrimaryContext primary(int i) {
			return GetRuleContext<PrimaryContext>(i);
		}
		public ITerminalNode[] MULOP() { return GetTokens(ALangParser.MULOP); }
		public ITerminalNode MULOP(int i) {
			return GetToken(ALangParser.MULOP, i);
		}
		public MultiExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterMultiExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitMultiExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiExpressionContext multiExpression() {
		MultiExpressionContext _localctx = new MultiExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_multiExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; primary();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULOP) {
				{
				{
				State = 109; Match(MULOP);
				State = 110; primary();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(ALangParser.LPAREN, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ALangParser.RPAREN, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 18, RULE_primary);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGERS:
			case PIN:
			case TIME:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; value();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117; Match(LPAREN);
				State = 118; primaryExpression();
				State = 119; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(ALangParser.COMMA, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 20, RULE_params);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; param();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; param();
				State = 125; Match(COMMA);
				State = 126; @params();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(ALangParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(ALangParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 22, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(TYPE);
			State = 132; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public DclContext dcl() {
			return GetRuleContext<DclContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		public RepeatstmtContext repeatstmt() {
			return GetRuleContext<RepeatstmtContext>(0);
		}
		public OutputstmtContext outputstmt() {
			return GetRuleContext<OutputstmtContext>(0);
		}
		public ReturnstmtContext returnstmt() {
			return GetRuleContext<ReturnstmtContext>(0);
		}
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public AssignstmtContext assignstmt() {
			return GetRuleContext<AssignstmtContext>(0);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 24, RULE_stmts);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134; dcl();
				State = 135; stmts();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; ifstmt();
				State = 138; stmts();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 140; repeatstmt();
				State = 141; stmts();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 143; outputstmt();
				State = 144; stmts();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 146; returnstmt();
				State = 147; stmts();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 149; functioncall();
				State = 150; stmts();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 152; assignstmt();
				State = 153; stmts();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignstmtContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ALangParser.ID, 0); }
		public ITerminalNode ASSIGNOPERATOR() { return GetToken(ALangParser.ASSIGNOPERATOR, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode ENDTERM() { return GetToken(ALangParser.ENDTERM, 0); }
		public AssignstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterAssignstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitAssignstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignstmtContext assignstmt() {
		AssignstmtContext _localctx = new AssignstmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(ID);
			State = 159; Match(ASSIGNOPERATOR);
			State = 160; primaryExpression();
			State = 161; Match(ENDTERM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(ALangParser.IF, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(ALangParser.THEN, 0); }
		public StmtsContext[] stmts() {
			return GetRuleContexts<StmtsContext>();
		}
		public StmtsContext stmts(int i) {
			return GetRuleContext<StmtsContext>(i);
		}
		public ITerminalNode ENDIF() { return GetToken(ALangParser.ENDIF, 0); }
		public ITerminalNode ELSE() { return GetToken(ALangParser.ELSE, 0); }
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifstmt);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163; Match(IF);
				State = 164; primaryExpression();
				State = 165; Match(THEN);
				State = 166; stmts();
				State = 167; Match(ENDIF);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169; Match(IF);
				State = 170; primaryExpression();
				State = 171; Match(THEN);
				State = 172; stmts();
				State = 173; Match(ELSE);
				State = 174; stmts();
				State = 175; Match(ENDIF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatstmtContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public RepeatstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterRepeatstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitRepeatstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatstmtContext repeatstmt() {
		RepeatstmtContext _localctx = new RepeatstmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_repeatstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(T__5);
			State = 180; primaryExpression();
			State = 181; Match(T__6);
			State = 182; stmts();
			State = 183; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputstmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(ALangParser.ON, 0); }
		public ITerminalNode ID() { return GetToken(ALangParser.ID, 0); }
		public ITerminalNode ENDTERM() { return GetToken(ALangParser.ENDTERM, 0); }
		public ITerminalNode OFF() { return GetToken(ALangParser.OFF, 0); }
		public OutputstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterOutputstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitOutputstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputstmtContext outputstmt() {
		OutputstmtContext _localctx = new OutputstmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_outputstmt);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185; Match(ON);
				State = 186; Match(T__1);
				State = 187; Match(ID);
				State = 188; Match(ENDTERM);
				}
				break;
			case OFF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189; Match(OFF);
				State = 190; Match(T__1);
				State = 191; Match(ID);
				State = 192; Match(ENDTERM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstmtContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode ENDTERM() { return GetToken(ALangParser.ENDTERM, 0); }
		public ReturnstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterReturnstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitReturnstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstmtContext returnstmt() {
		ReturnstmtContext _localctx = new ReturnstmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_returnstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(T__8);
			State = 196; primaryExpression();
			State = 197; Match(ENDTERM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ALangParser.ID, 0); }
		public InputparamsContext inputparams() {
			return GetRuleContext<InputparamsContext>(0);
		}
		public ITerminalNode ENDTERM() { return GetToken(ALangParser.ENDTERM, 0); }
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 36, RULE_functioncall);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199; Match(ID);
				State = 200; Match(T__1);
				State = 201; inputparams();
				State = 202; Match(ENDTERM);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204; Match(ID);
				State = 205; Match(T__1);
				State = 206; Match(ENDTERM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputparamsContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(ALangParser.COMMA, 0); }
		public InputparamsContext inputparams() {
			return GetRuleContext<InputparamsContext>(0);
		}
		public InputparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputparams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterInputparams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitInputparams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputparams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputparamsContext inputparams() {
		InputparamsContext _localctx = new InputparamsContext(Context, State);
		EnterRule(_localctx, 38, RULE_inputparams);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210; value();
				State = 211; Match(COMMA);
				State = 212; inputparams();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ALangParser.ID, 0); }
		public ITerminalNode INTEGERS() { return GetToken(ALangParser.INTEGERS, 0); }
		public ITerminalNode PIN() { return GetToken(ALangParser.PIN, 0); }
		public ITerminalNode TIME() { return GetToken(ALangParser.TIME, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IALangListener typedListener = listener as IALangListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IALangVisitor<TResult> typedVisitor = visitor as IALangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGERS) | (1L << PIN) | (1L << TIME) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\xDD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', ':', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x45', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'W', 
		'\n', '\a', '\f', '\a', '\xE', '\a', 'Z', '\v', '\a', '\x3', '\a', '\x5', 
		'\a', ']', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\x62', '\n', '\b', '\f', '\b', '\xE', '\b', '\x65', '\v', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'j', '\n', '\t', '\f', '\t', 
		'\xE', '\t', 'm', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', 'r', '\n', '\n', '\f', '\n', '\xE', '\n', 'u', '\v', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'|', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x84', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x9F', '\n', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xB4', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\xC4', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xD2', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xD9', '\n', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x2', '\x2', '\x17', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		'\x2', '\x3', '\x5', '\x2', '\x1F', ' ', '#', '#', '%', '%', '\x2', '\xDE', 
		'\x2', ',', '\x3', '\x2', '\x2', '\x2', '\x4', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x44', '\x3', '\x2', '\x2', '\x2', '\b', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'O', '\x3', '\x2', '\x2', '\x2', '\f', '\\', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '^', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x12', 'n', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '{', '\x3', '\x2', '\x2', '\x2', '\x16', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x85', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xB3', '\x3', '\x2', '\x2', '\x2', ' ', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xC3', '\x3', '\x2', '\x2', '\x2', '$', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xD1', '\x3', '\x2', '\x2', '\x2', '(', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '*', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\x5', '\x4', '\x3', '\x2', '-', '.', '\a', '\x2', '\x2', 
		'\x3', '.', '\x3', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x5', '\x6', 
		'\x4', '\x2', '\x30', '\x31', '\x5', '\x4', '\x3', '\x2', '\x31', ':', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x5', '\b', '\x5', '\x2', 
		'\x33', '\x34', '\x5', '\x4', '\x3', '\x2', '\x34', ':', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x36', '\x5', '\n', '\x6', '\x2', '\x36', '\x37', 
		'\x5', '\x4', '\x3', '\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', 
		':', '\x3', '\x2', '\x2', '\x2', '\x39', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\x32', '\x3', '\x2', '\x2', '\x2', '\x39', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', '\x5', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '\x15', '\x2', '\x2', '<', 
		'=', '\a', '%', '\x2', '\x2', '=', '>', '\a', '\x19', '\x2', '\x2', '>', 
		'?', '\x5', '\f', '\a', '\x2', '?', '@', '\a', '\xE', '\x2', '\x2', '@', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x15', '\x2', 
		'\x2', '\x42', '\x43', '\a', '%', '\x2', '\x2', '\x43', '\x45', '\a', 
		'\xE', '\x2', '\x2', '\x44', ';', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x45', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\a', '\x3', '\x2', '\x2', 'G', 'H', '\a', '%', '\x2', 
		'\x2', 'H', 'I', '\a', '\x4', '\x2', '\x2', 'I', 'J', '\x5', '\x16', '\f', 
		'\x2', 'J', 'K', '\a', '\x5', '\x2', '\x2', 'K', 'L', '\a', '\x15', '\x2', 
		'\x2', 'L', 'M', '\x5', '\x1A', '\xE', '\x2', 'M', 'N', '\a', '\x6', '\x2', 
		'\x2', 'N', '\t', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\a', '\x2', 
		'\x2', 'P', 'Q', '\a', '&', '\x2', '\x2', 'Q', 'R', '\a', '\xE', '\x2', 
		'\x2', 'R', '\v', '\x3', '\x2', '\x2', '\x2', 'S', 'X', '\x5', '\xE', 
		'\b', '\x2', 'T', 'U', '\a', '\x1C', '\x2', '\x2', 'U', 'W', '\x5', '\xE', 
		'\b', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'Y', ']', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', 
		'\x2', '\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', '\\', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '\r', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x63', '\x5', '\x10', '\t', '\x2', '_', 
		'`', '\a', '\x1D', '\x2', '\x2', '`', '\x62', '\x5', '\x10', '\t', '\x2', 
		'\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'k', '\x5', '\x12', 
		'\n', '\x2', 'g', 'h', '\a', '\x1A', '\x2', '\x2', 'h', 'j', '\x5', '\x12', 
		'\n', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x11', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'n', 's', '\x5', '\x14', '\v', '\x2', 'o', 'p', '\a', 
		'\x1B', '\x2', '\x2', 'p', 'r', '\x5', '\x14', '\v', '\x2', 'q', 'o', 
		'\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 's', 
		'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', '\x13', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', 
		'\x2', 'v', '|', '\x5', '*', '\x16', '\x2', 'w', 'x', '\a', '\x16', '\x2', 
		'\x2', 'x', 'y', '\x5', '\f', '\a', '\x2', 'y', 'z', '\a', '\x17', '\x2', 
		'\x2', 'z', '|', '\x3', '\x2', '\x2', '\x2', '{', 'v', '\x3', '\x2', '\x2', 
		'\x2', '{', 'w', '\x3', '\x2', '\x2', '\x2', '|', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '}', '\x84', '\x5', '\x18', '\r', '\x2', '~', '\x7F', '\x5', 
		'\x18', '\r', '\x2', '\x7F', '\x80', '\a', '\x18', '\x2', '\x2', '\x80', 
		'\x81', '\x5', '\x16', '\f', '\x2', '\x81', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x84', '\x3', '\x2', '\x2', '\x2', '\x83', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '~', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x86', '\a', '\x15', '\x2', '\x2', '\x86', '\x87', '\a', 
		'%', '\x2', '\x2', '\x87', '\x19', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x5', '\x6', '\x4', '\x2', '\x89', '\x8A', '\x5', '\x1A', '\xE', 
		'\x2', '\x8A', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x5', 
		'\x1E', '\x10', '\x2', '\x8C', '\x8D', '\x5', '\x1A', '\xE', '\x2', '\x8D', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x5', ' ', '\x11', 
		'\x2', '\x8F', '\x90', '\x5', '\x1A', '\xE', '\x2', '\x90', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\x5', '\"', '\x12', '\x2', '\x92', 
		'\x93', '\x5', '\x1A', '\xE', '\x2', '\x93', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x95', '\x5', '$', '\x13', '\x2', '\x95', '\x96', '\x5', 
		'\x1A', '\xE', '\x2', '\x96', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\x5', '&', '\x14', '\x2', '\x98', '\x99', '\x5', '\x1A', '\xE', 
		'\x2', '\x99', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x5', 
		'\x1C', '\xF', '\x2', '\x9B', '\x9C', '\x5', '\x1A', '\xE', '\x2', '\x9C', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x88', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '%', '\x2', 
		'\x2', '\xA1', '\xA2', '\a', '\x19', '\x2', '\x2', '\xA2', '\xA3', '\x5', 
		'\f', '\a', '\x2', '\xA3', '\xA4', '\a', '\xE', '\x2', '\x2', '\xA4', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', '\xF', '\x2', 
		'\x2', '\xA6', '\xA7', '\x5', '\f', '\a', '\x2', '\xA7', '\xA8', '\a', 
		'\x14', '\x2', '\x2', '\xA8', '\xA9', '\x5', '\x1A', '\xE', '\x2', '\xA9', 
		'\xAA', '\a', '\f', '\x2', '\x2', '\xAA', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAC', '\a', '\xF', '\x2', '\x2', '\xAC', '\xAD', '\x5', 
		'\f', '\a', '\x2', '\xAD', '\xAE', '\a', '\x14', '\x2', '\x2', '\xAE', 
		'\xAF', '\x5', '\x1A', '\xE', '\x2', '\xAF', '\xB0', '\a', '\x11', '\x2', 
		'\x2', '\xB0', '\xB1', '\x5', '\x1A', '\xE', '\x2', '\xB1', '\xB2', '\a', 
		'\f', '\x2', '\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\a', 
		'\b', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\f', '\a', '\x2', '\xB7', 
		'\xB8', '\a', '\t', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\x1A', '\xE', 
		'\x2', '\xB9', '\xBA', '\a', '\n', '\x2', '\x2', '\xBA', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xBC', '\a', '!', '\x2', '\x2', '\xBC', '\xBD', 
		'\a', '\x4', '\x2', '\x2', '\xBD', '\xBE', '\a', '%', '\x2', '\x2', '\xBE', 
		'\xC4', '\a', '\xE', '\x2', '\x2', '\xBF', '\xC0', '\a', '\"', '\x2', 
		'\x2', '\xC0', '\xC1', '\a', '\x4', '\x2', '\x2', '\xC1', '\xC2', '\a', 
		'%', '\x2', '\x2', '\xC2', '\xC4', '\a', '\xE', '\x2', '\x2', '\xC3', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '#', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', 
		'\v', '\x2', '\x2', '\xC6', '\xC7', '\x5', '\f', '\a', '\x2', '\xC7', 
		'\xC8', '\a', '\xE', '\x2', '\x2', '\xC8', '%', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xCA', '\a', '%', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x4', 
		'\x2', '\x2', '\xCB', '\xCC', '\x5', '(', '\x15', '\x2', '\xCC', '\xCD', 
		'\a', '\xE', '\x2', '\x2', '\xCD', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xCF', '\a', '%', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x4', 
		'\x2', '\x2', '\xD0', '\xD2', '\a', '\xE', '\x2', '\x2', '\xD1', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\'', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD9', '\x5', '*', 
		'\x16', '\x2', '\xD4', '\xD5', '\x5', '*', '\x16', '\x2', '\xD5', '\xD6', 
		'\a', '\x18', '\x2', '\x2', '\xD6', '\xD7', '\x5', '(', '\x15', '\x2', 
		'\xD7', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD9', ')', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\t', '\x2', '\x2', '\x2', 
		'\xDB', '+', '\x3', '\x2', '\x2', '\x2', '\x10', '\x39', '\x44', 'X', 
		'\\', '\x63', 'k', 's', '{', '\x83', '\x9E', '\xB3', '\xC3', '\xD1', '\xD8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrGen
